package net.xngo.utils.java.util;

import java.util.ArrayList;

/**
 * Simple circular array list. It is not full proof.
 * Notes:
 *  -add(E e): Always return false so that it has the same signature as java.util.ArrayList<E>.add(E e).
 *  -Remove an element is not tested yet.
 * @author Xuan Ngo
 *
 * @param <E>
 */
public class CircularArrayList<E> extends ArrayList<E> 
{
  
  /**
   * serialVersionUID is auto generated by Eclipse.
   */
  private static final long serialVersionUID = 2784995695378956707L;
  
  private int capacity = 0;
  private int head     = 0;

  public CircularArrayList(int capacity)
  {
    super(capacity);    
    this.capacity = capacity;

  }

  @Override
  public boolean add(E e)
  {

    this.add(this.head, e);
    
    // Return something so that it has the same 
    //  signature as java.util.ArrayList<E>.add(E e).
    return false; 
  }
  
  @Override
  public void add(int index, E element)
  {
    if(this.head<this.capacity)
    {
      if(super.size()==this.capacity)
        super.set(this.head, element);
      else
        super.add(this.head, element);
      
      this.head++;
    }
    else
    {
      this.head = 0;
      super.set(this.head, element);
      this.head++;
    }    
  }
  
  
  @Override
  public E get(int index)
  {
    if(index<0)
      throw new IndexOutOfBoundsException(String.format("Negative index value(%d) is not allowed.", index));
    
    if(index>this.head)
      throw new IndexOutOfBoundsException(String.format("Index value(%d) is not allowed to be equal or bigger than the array size(%d).", index, this.capacity()));
    
    return super.get(index%this.head);
  }
  
  public int capacity()
  {
    return this.capacity;
  }
  
}